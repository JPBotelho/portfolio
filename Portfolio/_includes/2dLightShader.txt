{% highlight glsl %}
float distanceToSphere(vec3 sphere, vec2 point)
{
    return sqrt(pow((point.x - sphere.x), 2.0)+pow((point.y - sphere.y), 2.0))- sphere.z;
}


//Position xy, Radius
vec3 sphere1 = vec3(1.3, .3, .05);
vec3 sphere2 = vec3(.4, .45, .05);

float intensity = 2.0;

struct PointLight
{
	vec2 pos;
    vec3 color;
    float intensity;
};
    
PointLight centerLight = PointLight(vec2(0, 0), vec3(.1, .3, .8), 2.0);
    
PointLight rightLight = PointLight(vec2(.3, .7), vec3(.7, .2, .5), 2.0);


vec3 RenderLight(PointLight light, vec2 uv)
{
    vec3 finalColor = vec3(0);
    vec2 ray = normalize(light.pos - uv);   

    int maxSteps = 200;
    vec2 currentPoint = uv;
    float travelledDist = 0.0;
    float dist, dist2;
    float smallestDistance = 1.0;
    for(int i = 0; i < maxSteps; i++)
    {
    	dist = distanceToSphere(sphere1, currentPoint);
        dist2 = distanceToSphere(sphere2, currentPoint);
        float distToTarget = length(light.pos - currentPoint);
        float minDistance = min(min(dist, dist2), distToTarget);
        smallestDistance = min(smallestDistance, min(dist, dist2));
        if(minDistance < .01)
        {
            break;
        }
        
        travelledDist += minDistance;
        currentPoint = uv + ray * travelledDist;
        
        if(length(currentPoint-light.pos)<.02)
        {
            float lightVal = .2 * (1.0 - length(uv - light.pos) + .2);
            if(smallestDistance < .03)
            {
            	float clamper = smallestDistance / .03;
                finalColor = light.color * light.intensity * mix(0.0, lightVal, clamper);
            }
            else
            {
	            finalColor += light.color * lightVal * light.intensity;   
            }
            break;
        }
    }
    return finalColor;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.y;
	vec2 mousePos = iMouse.xy / iResolution.y;
    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    fragColor = vec4(0);
        
    centerLight.pos = mousePos;
    rightLight.pos.x = .30 + (sin(iTime/1.5)+1.0)/2.0;
    vec3 light1 = RenderLight(centerLight, uv);
    vec3 light2 = RenderLight(rightLight, uv);
    fragColor = vec4(light1 + light2, 1);
    float dist, dist2;

    dist = distanceToSphere(sphere1, uv);
    dist2 = distanceToSphere(sphere2, uv);
    if(dist < .01)
    {
    	fragColor = vec4(1);
    }
    
    if(dist2 < .01)
    {
    	fragColor = vec4(1);
    }
}

{% endhighlight %}
